// Generated by CoffeeScript 1.6.3
(function() {
  window.app = window.app || {};

  window.app.AppView = Backbone.View.extend({
    el: '#content',
    events: {
      'click .facebook-auth-button': 'auth',
      'keyup #search-friends': 'searchFriends',
      'click .pagination-button': 'navigate',
      'click .alpha-sort-button': 'alphaSort'
    },
    initialize: function() {
      this.$authContainer = $('.auth');
      this.$authButton = $('.facebook-auth-button');
      this.$friendsContainer = $('.friends-container');
      this.$friendList = $('.friends-list');
      this.$filterContainer = $('.filters');
      this.$search = $('#search-friends');
      this.$paginationContainer = $('.pagination-container');
      this.$paginationInfo = $('.pagination-info');
      this.$paginationBack = $('#pagination-back-button');
      this.$paginationForward = $('#pagination-forward-button');
      this.$sortAZ = $('#alpha-sort-az');
      this.$sortZA = $('#alpha-sort-za');
      this.listenTo(window.app.facebook, 'facebookStatusChange', this.updateAuth);
      this.listenTo(window.app.facebook, 'isLoggedIn', this.getData);
      this.listenTo(window.app.friends, 'reset', this.resetFriendList);
      this.listenTo(window.app.page, 'pageUpdate', this.resetFriendList);
      return this.listenTo(window.app.friends, 'all', this.render);
    },
    render: function(event) {},
    showFriend: function(friend) {
      var friendView;
      friendView = new window.app.FriendView({
        model: friend
      });
      this.$friendList.append(friendView.render().el);
    },
    resetFriendList: function() {
      var collection, paginated;
      $('.loading-container').remove();
      if ((window.app.friends != null) && window.app.friends.length) {
        this.$filterContainer.show();
        if ((window.app.filteredCollection != null) && window.app.filteredCollection.length !== window.app.friends.length) {
          window.app.page.updatePageInfo(window.app.filteredCollection);
          collection = window.app.filteredCollection;
        } else {
          window.app.page.updatePageInfo(window.app.friends);
          collection = window.app.friends;
        }
        collection.sortDirection = window.app.page.sorting.sortDirection;
        collection.sortFriends(window.app.page.sorting.sortAttribute);
        paginated = collection.slice(window.app.page.info.start, window.app.page.info.finish);
        this.$paginationInfo.html(window.app.page.info.currentPage + ' / ' + window.app.page.info.totalPages);
        if (window.app.page.info.currentPage < 2) {
          this.$paginationBack.addClass('disabled');
        } else if (this.$paginationBack.hasClass('disabled')) {
          this.$paginationBack.removeClass('disabled');
        }
        if (window.app.page.info.currentPage === window.app.page.info.totalPages) {
          this.$paginationForward.addClass('disabled');
        } else if (this.$paginationForward.hasClass('disabled')) {
          this.$paginationForward.removeClass('disabled');
        }
        this.$friendList.empty();
        if (paginated.length) {
          _.each(paginated, this.showFriend, this);
        } else {
          $('<a/>', {
            "class": 'list-group-item text-center',
            html: '<span><i class="icon-frown"></i> No Matches</span>'
          }).appendTo(this.$friendList);
        }
      } else {
        $('.user-profile-picture').remove();
        this.$friendList.empty();
        this.$filterContainer.hide();
      }
    },
    getData: function(callback) {
      var $loadingContainer, $loadingSpinner;
      if (!$.trim(this.$friendList.html())) {
        $loadingContainer = $('<div/>', {
          "class": 'loading-container text-center'
        }).appendTo('#content');
        $loadingSpinner = $('<i/>', {
          "class": 'icon-cog icon-spin icon-4x text-primary'
        }).appendTo($loadingContainer);
        window.app.friends.fetch({
          success: function(collection, response, options) {
            window.app.facebook.graph = options.facebookResponse;
            if (!$('.user-profile-picture').length) {
              return $('<img/>', {
                "class": 'user-profile-picture img-rounded',
                src: window.app.facebook.graph.picture.data.url,
                width: '40',
                height: '40'
              }).appendTo('.auth');
            }
          },
          error: function(response) {
            return console.log('Facebook query error');
          },
          reset: true
        });
      }
    },
    searchFriends: function(e) {
      var searchText;
      if (e.which === 13) {
        e.preventDefault();
      }
      searchText = this.$search.val();
      window.app.filteredCollection = window.app.friends.search(searchText);
      window.app.page.reset();
      window.app.page.trigger('pageUpdate', window.app.filteredCollection);
    },
    alphaSort: function(e) {
      var asc, thisSortButton;
      e.preventDefault();
      thisSortButton = $(e.currentTarget);
      if (thisSortButton.hasClass('active')) {
        return;
      }
      $('.alpha-sort-button').removeClass('active');
      thisSortButton.addClass('active');
      asc = thisSortButton.is('#alpha-sort-az') ? true : false;
      window.app.page.sorting.sortDirection = asc === true ? 1 : -1;
      window.app.page.reset();
      window.app.page.trigger('pageUpdate');
    },
    navigate: function(e) {
      var thisNavButton;
      e.preventDefault();
      thisNavButton = $(e.currentTarget);
      if (thisNavButton.is('#pagination-back-button')) {
        window.app.page.info.currentPage--;
      } else {
        window.app.page.info.currentPage++;
      }
      window.app.page.trigger('pageUpdate');
    },
    updateAuth: function(response) {
      if (response.status === 'connected') {
        this.$authButton.html('<i class="icon-signout"></i> Logout');
        window.app.facebook.isLoggedIn = true;
        window.app.facebook.trigger('isLoggedIn');
      } else {
        this.$authButton.html('<i class="icon-facebook-sign"></i> Sign In with Facebook');
        window.app.facebook.isLoggedIn = false;
      }
    },
    auth: function(e) {
      e.preventDefault();
      if (window.app.facebook.isLoggedIn === true) {
        window.FB.logout(function(response) {
          return window.location.reload(true);
        });
      } else {
        window.FB.login(null, {
          scope: 'friends_photos, user_friends, user_photos'
        });
      }
    }
  });

}).call(this);
